# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('ToFData.dll')
if __package__ or '.' in __name__:
    from . import _ToFDataWrapper
else:
    import _ToFDataWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ToFDataWrapper.delete_SwigPyIterator

    def value(self):
        return _ToFDataWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ToFDataWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ToFDataWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ToFDataWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ToFDataWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ToFDataWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _ToFDataWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _ToFDataWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _ToFDataWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ToFDataWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ToFDataWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ToFDataWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ToFDataWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ToFDataWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ToFDataWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ToFDataWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ToFDataWrapper:
_ToFDataWrapper.SwigPyIterator_swigregister(SwigPyIterator)
FASTCDR_VERSION_MAJOR = _ToFDataWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _ToFDataWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _ToFDataWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _ToFDataWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _ToFDataWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _ToFDataWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _ToFDataWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _ToFDataWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _ToFDataSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ToFDataWrapper.delete__ToFDataSeq

# Register _ToFDataSeq in _ToFDataWrapper:
_ToFDataWrapper._ToFDataSeq_swigregister(_ToFDataSeq)
class ToFDataSeq(_ToFDataSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ToFDataWrapper.delete_ToFDataSeq

    def __init__(self, *args):
        _ToFDataWrapper.ToFDataSeq_swiginit(self, _ToFDataWrapper.new_ToFDataSeq(*args))

    def __len__(self):
        return _ToFDataWrapper.ToFDataSeq___len__(self)

    def __getitem__(self, i):
        return _ToFDataWrapper.ToFDataSeq___getitem__(self, i)

# Register ToFDataSeq in _ToFDataWrapper:
_ToFDataWrapper.ToFDataSeq_swigregister(ToFDataSeq)
class ToFData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ToFDataWrapper.delete_ToFData

    def __init__(self, *args):
        _ToFDataWrapper.ToFData_swiginit(self, _ToFDataWrapper.new_ToFData(*args))

    def __eq__(self, x):
        return _ToFDataWrapper.ToFData___eq__(self, x)

    def __ne__(self, x):
        return _ToFDataWrapper.ToFData___ne__(self, x)

    def sec(self, *args):
        return _ToFDataWrapper.ToFData_sec(self, *args)

    def nanosec(self, *args):
        return _ToFDataWrapper.ToFData_nanosec(self, *args)

    def distance(self, *args):
        return _ToFDataWrapper.ToFData_distance(self, *args)

# Register ToFData in _ToFDataWrapper:
_ToFDataWrapper.ToFData_swigregister(ToFData)
FASTDDS_GEN_API_VER = _ToFDataWrapper.FASTDDS_GEN_API_VER
class ToFDataPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ToFDataWrapper.ToFDataPubSubType_swiginit(self, _ToFDataWrapper.new_ToFDataPubSubType())
    __swig_destroy__ = _ToFDataWrapper.delete_ToFDataPubSubType

    def serialize(self, data, payload, data_representation):
        return _ToFDataWrapper.ToFDataPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _ToFDataWrapper.ToFDataPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _ToFDataWrapper.ToFDataPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _ToFDataWrapper.ToFDataPubSubType_compute_key(self, *args)

    def create_data(self):
        return _ToFDataWrapper.ToFDataPubSubType_create_data(self)

    def delete_data(self, data):
        return _ToFDataWrapper.ToFDataPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _ToFDataWrapper.ToFDataPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _ToFDataWrapper.ToFDataPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _ToFDataWrapper.ToFDataPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _ToFDataWrapper.ToFDataPubSubType_construct_sample(self, memory)

# Register ToFDataPubSubType in _ToFDataWrapper:
_ToFDataWrapper.ToFDataPubSubType_swigregister(ToFDataPubSubType)

