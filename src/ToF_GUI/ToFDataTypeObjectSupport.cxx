// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ToFDataTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "ToFDataTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "ToFData.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ToFData_type_identifier(
        TypeIdentifierPair& type_ids_ToFData)
{

    ReturnCode_t return_code_ToFData {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ToFData =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ToFData", type_ids_ToFData);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ToFData)
    {
        StructTypeFlag struct_flags_ToFData = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ToFData = "ToFData";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ToFData;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ToFData;
        CompleteTypeDetail detail_ToFData = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ToFData, ann_custom_ToFData, type_name_ToFData.to_string());
        CompleteStructHeader header_ToFData;
        header_ToFData = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ToFData);
        CompleteStructMemberSeq member_seq_ToFData;
        {
            TypeIdentifierPair type_ids_sec;
            ReturnCode_t return_code_sec {eprosima::fastdds::dds::RETCODE_OK};
            return_code_sec =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_sec);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_sec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "sec Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_sec = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_sec = 0x00000000;
            bool common_sec_ec {false};
            CommonStructMember common_sec {TypeObjectUtils::build_common_struct_member(member_id_sec, member_flags_sec, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_sec, common_sec_ec))};
            if (!common_sec_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure sec member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_sec = "sec";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_sec;
            ann_custom_ToFData.reset();
            CompleteMemberDetail detail_sec = TypeObjectUtils::build_complete_member_detail(name_sec, member_ann_builtin_sec, ann_custom_ToFData);
            CompleteStructMember member_sec = TypeObjectUtils::build_complete_struct_member(common_sec, detail_sec);
            TypeObjectUtils::add_complete_struct_member(member_seq_ToFData, member_sec);
        }
        {
            TypeIdentifierPair type_ids_nanosec;
            ReturnCode_t return_code_nanosec {eprosima::fastdds::dds::RETCODE_OK};
            return_code_nanosec =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_nanosec);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_nanosec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "nanosec Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_nanosec = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_nanosec = 0x00000001;
            bool common_nanosec_ec {false};
            CommonStructMember common_nanosec {TypeObjectUtils::build_common_struct_member(member_id_nanosec, member_flags_nanosec, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_nanosec, common_nanosec_ec))};
            if (!common_nanosec_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure nanosec member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_nanosec = "nanosec";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_nanosec;
            ann_custom_ToFData.reset();
            CompleteMemberDetail detail_nanosec = TypeObjectUtils::build_complete_member_detail(name_nanosec, member_ann_builtin_nanosec, ann_custom_ToFData);
            CompleteStructMember member_nanosec = TypeObjectUtils::build_complete_struct_member(common_nanosec, detail_nanosec);
            TypeObjectUtils::add_complete_struct_member(member_seq_ToFData, member_nanosec);
        }
        {
            TypeIdentifierPair type_ids_distance;
            ReturnCode_t return_code_distance {eprosima::fastdds::dds::RETCODE_OK};
            return_code_distance =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_distance);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_distance)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "distance Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_distance = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_distance = 0x00000002;
            bool common_distance_ec {false};
            CommonStructMember common_distance {TypeObjectUtils::build_common_struct_member(member_id_distance, member_flags_distance, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_distance, common_distance_ec))};
            if (!common_distance_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure distance member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_distance = "distance";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_distance;
            ann_custom_ToFData.reset();
            CompleteMemberDetail detail_distance = TypeObjectUtils::build_complete_member_detail(name_distance, member_ann_builtin_distance, ann_custom_ToFData);
            CompleteStructMember member_distance = TypeObjectUtils::build_complete_struct_member(common_distance, detail_distance);
            TypeObjectUtils::add_complete_struct_member(member_seq_ToFData, member_distance);
        }
        CompleteStructType struct_type_ToFData = TypeObjectUtils::build_complete_struct_type(struct_flags_ToFData, header_ToFData, member_seq_ToFData);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ToFData, type_name_ToFData.to_string(), type_ids_ToFData))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ToFData already registered in TypeObjectRegistry for a different type.");
        }
    }
}

