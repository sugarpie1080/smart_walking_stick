// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ToFData.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__TOFDATA_HPP
#define FAST_DDS_GENERATED__TOFDATA_HPP

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TOFDATA_SOURCE)
#define TOFDATA_DllAPI __declspec( dllexport )
#else
#define TOFDATA_DllAPI __declspec( dllimport )
#endif // TOFDATA_SOURCE
#else
#define TOFDATA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TOFDATA_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure ToFData defined by the user in the IDL file.
 * @ingroup ToFData
 */
class ToFData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ToFData()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ToFData()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ToFData that will be copied.
     */
    eProsima_user_DllExport ToFData(
            const ToFData& x)
    {
                    m_sec = x.m_sec;

                    m_nanosec = x.m_nanosec;

                    m_distance = x.m_distance;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ToFData that will be copied.
     */
    eProsima_user_DllExport ToFData(
            ToFData&& x) noexcept
    {
        m_sec = x.m_sec;
        m_nanosec = x.m_nanosec;
        m_distance = x.m_distance;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ToFData that will be copied.
     */
    eProsima_user_DllExport ToFData& operator =(
            const ToFData& x)
    {

                    m_sec = x.m_sec;

                    m_nanosec = x.m_nanosec;

                    m_distance = x.m_distance;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ToFData that will be copied.
     */
    eProsima_user_DllExport ToFData& operator =(
            ToFData&& x) noexcept
    {

        m_sec = x.m_sec;
        m_nanosec = x.m_nanosec;
        m_distance = x.m_distance;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ToFData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ToFData& x) const
    {
        return (m_sec == x.m_sec &&
           m_nanosec == x.m_nanosec &&
           m_distance == x.m_distance);
    }

    /*!
     * @brief Comparison operator.
     * @param x ToFData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ToFData& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(
            int32_t _sec)
    {
        m_sec = _sec;
    }

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport int32_t sec() const
    {
        return m_sec;
    }

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport int32_t& sec()
    {
        return m_sec;
    }


    /*!
     * @brief This function sets a value in member nanosec
     * @param _nanosec New value for member nanosec
     */
    eProsima_user_DllExport void nanosec(
            int32_t _nanosec)
    {
        m_nanosec = _nanosec;
    }

    /*!
     * @brief This function returns the value of member nanosec
     * @return Value of member nanosec
     */
    eProsima_user_DllExport int32_t nanosec() const
    {
        return m_nanosec;
    }

    /*!
     * @brief This function returns a reference to member nanosec
     * @return Reference to member nanosec
     */
    eProsima_user_DllExport int32_t& nanosec()
    {
        return m_nanosec;
    }


    /*!
     * @brief This function sets a value in member distance
     * @param _distance New value for member distance
     */
    eProsima_user_DllExport void distance(
            float _distance)
    {
        m_distance = _distance;
    }

    /*!
     * @brief This function returns the value of member distance
     * @return Value of member distance
     */
    eProsima_user_DllExport float distance() const
    {
        return m_distance;
    }

    /*!
     * @brief This function returns a reference to member distance
     * @return Reference to member distance
     */
    eProsima_user_DllExport float& distance()
    {
        return m_distance;
    }



private:

    int32_t m_sec{0};
    int32_t m_nanosec{0};
    float m_distance{0.0};

};

#endif // _FAST_DDS_GENERATED_TOFDATA_HPP_


